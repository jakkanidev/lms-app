pipeline {
    agent any
    
    stages{
	    stage('Frontend Sonar Analysis') {
            steps {
                echo 'Code Analyzing..'
                sh 'cd webapp && sudo docker run --rm -e SONAR_HOST_URL="http://3.129.217.107:9000" -e SONAR_LOGIN="sqp_04d2ee41b5ef56e17472228407611b06114fbdeb"  -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms'
            }
        }
		stage('Build and Push Frontend Image') {
            steps {
				script {
					withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
						// Log in to Docker Hub
						sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
						echo 'logged in to dockerhub'

						// Read the version from package.json
						def packageJSON = readJSON file: 'webapp/package.json'
						def Version = packageJSON.version
						echo "version = ${Version}"

						// Build and push frontend image
						sh "cd webapp && sudo docker build -t santhoshjakkani/lms-frontend-image:${Version} ."
						echo 'build successfull !!'
						sh "sudo docker push santhoshjakkani/lms-frontend-image:${Version}"
						echo "lms-frontend-image:${Version} pushed to docker hub"

						// Delete the local frontend image
						sh "sudo docker rm -f santhoshjakkani/lms-frontend-image:${Version}"
						echo "lms-frontend-image:${Version} deleted from local"
					}
				}
			}
		}		
        stage('Run Frontend Container') {
            steps {
                script {
                    // Load Docker Hub credentials
					withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
						// Log in to Docker Hub
						sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
						echo 'logged in to dockerhub'

						// Read the version from package.json
						def packageJSON = readJSON file: 'webapp/package.json'
						def Version = packageJSON.version
						echo "version = ${Version}"

                        // Check if the container exists
						def containerExists = sh(script: 'sudo docker ps -a --filter name=lms-frontend-container --format "{{.Names}}"', returnStdout: true).trim()
						
						echo "container name: ${containerExists}"
						if (containerExists == 'lms-frontend-container') {
							// Get the image ID associated with the container
							def imageId = sh(script: 'sudo docker inspect --format="{{.Image}}" lms-frontend-container', returnStdout: true).trim()
                            
							// Container exists, stop and delete it
                            sh 'sudo docker stop lms-frontend-container'
                            sh 'sudo docker rm -f lms-frontend-container'
							sh "sudo docker rmi ${imageId}"
							echo 'lms-frontend-container its image are deleted'
                        }

                        // Container doesn't exist, create it
						sh "sudo docker container run -dt --name lms-frontend-container --network lmsnetwork -p 80:80 santhoshjakkani/lms-frontend-image:${Version}"
						echo "successfully running santhoshjakkani/lms-frontend-image:${Version} container"
                    }
                }
            }
        }		
	}		
}
